{"version":3,"sources":["components/Table.js","config/queries.js","config/gets.js","config/storedProcedures.js","config/posts.js","App.js","index.js"],"names":["Table","props","data","headers","length","Object","keys","className","map","header","row","indexOf","queries","description","inputType","name","gets","route","inputs","type","storedProcedures","posts","App","useState","selectedNavIndex","setSelectedNavIndex","selectedInputIndex","setSelectedInputIndex","input","setInput","Date","startDate","setStartDate","finalDate","setFinalDate","resData","setResData","err","setErr","loading","setLoading","activeSection","setActiveSection","activeObj","setActiveObj","setInputs","inputErr","setInputErr","strings","inputNames","twoDates","null","id","booleans","true","false","buildRoute","i","parseInput","e","changeInputs","value","index","setIntInput","setDoubleInput","setDateInput","setBooleanInput","setStringInput","changeObj","newIndex","section","formatDate","date","getFullYear","getMonth","getDate","makeGet","a","console","log","axios","get","response","status","makePost","post","makeQuery","hours","getHours","minutes","getMinutes","seconds","getSeconds","formatHour","parseFloat","temp","charAt","isNaN","parseInt","limit","split","substring","src","alt","getItem","onClick","postItem","query","storedProcedure","style","fontSize","inputIndex","selected","onChange","display","alignItems","flexDirection","changeInput","target","bool","JSON","stringify","showTimeSelect","showTimeSelectOnly","width","includes","margin","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.523f0f79.chunk.js","sourcesContent":["// Styles\r\nimport \"../App.css\";\r\n\r\nexport const Table = (props) => {\r\n  const { data } = props;\r\n  const headers =\r\n    data != null && data.length >= 1 ? Object.keys(data[0]) : null;\r\n\r\n  return headers ? (\r\n    <div className=\"table\">\r\n      <div className=\"tableRow\">\r\n        {headers.map((header) => (\r\n          <div className=\"cell cellHeader\">\r\n            <p className=\"cellText cellTextHeader\">{header}</p>\r\n          </div>\r\n        ))}\r\n      </div>\r\n      {data.map((row) => (\r\n        <div className=\"tableRow\">\r\n          {headers.map((header) => (\r\n            <div className={`cell cell${data.indexOf(row) % 2}`}>\r\n              <p className=\"cellText\">{row[header]}</p>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  ) : null;\r\n};\r\n","const queries = [\r\n  // 1\r\n  {\r\n    description: \"Factura del servicio de estadía en Hotel.\",\r\n    inputType: [\"id\"],\r\n    name: \"Consulta 1\",\r\n  },\r\n  // 2\r\n  {\r\n    description:\r\n      \"Reporte de habitaciones disponibles clasificado por tipo de habitación.\",\r\n    inputType: [null],\r\n    name: \"Consulta 2\",\r\n  },\r\n  // 3\r\n  {\r\n    description:\r\n      \"Reporte de habitaciones ocupadas y número de huéspedes por fecha determinada.\",\r\n    inputType: [\"twoDates\"],\r\n    name: \"Consulta 3\",\r\n  },\r\n  // 4\r\n  {\r\n    description:\r\n      \"Reporte de ocupación del hotel clasificado por temporada en un rango de fechas dado.\",\r\n    inputType: [\"twoDates\"],\r\n    name: \"Consulta 4\",\r\n  },\r\n  // 5\r\n  {\r\n    description:\r\n      \"Reporte del tipo de habitación con su descripción y números de habitaciones disponible del  hotel.\",\r\n    inputType: [null, \"id\"],\r\n    name: \"Consulta 5\",\r\n  },\r\n  // 6\r\n  {\r\n    description:\r\n      \"Reporte de los registros con mayor tiempo de ocupación por un rango de fechas determinado.\",\r\n    inputType: [\"twoDates\"],\r\n    name: \"Consulta 6\",\r\n  },\r\n  // 7\r\n  {\r\n    description:\r\n      \"Reporte de los empleados totales que laboran en el hotel, clasificado por departamentos.\",\r\n    inputType: [null],\r\n    name: \"Consulta 7\",\r\n  },\r\n  // 8\r\n  {\r\n    description:\r\n      \"Reporte de los empleados de mostrador con mayor bono obtenido por el registro de los  huéspedes en base a una fecha determinada.\",\r\n    inputType: [null],\r\n    name: \"Consulta 8\",\r\n  },\r\n  // 9\r\n  {\r\n    description:\r\n      \"Reporte de las ventas realizadas (Registro de habitación, servicios adquiridos) en un  determinado rango de fechas.\",\r\n    inputType: [\"twoDates\"],\r\n    name: \"Consulta 9\",\r\n  },\r\n  // 10\r\n  {\r\n    description:\r\n      \"Reporte de ganancias obtenidas por servicios adquiridos clasificados por tipo de servicio y en  base a un rango de fechas dado.\",\r\n    inputType: [\"twoDates\"],\r\n    name: \"Consulta 10\",\r\n  },\r\n  // 11\r\n  {\r\n    description:\r\n      \"Reporte de quejas registradas en base a un rango de fechas dado y clasificado por el  departamento al que fue aplicada la queja.\",\r\n    inputType: [null],\r\n    name: \"Consulta 11\",\r\n  },\r\n  // 12\r\n  {\r\n    description:\r\n      \"Reporte de número de huéspedes registrados y clasificados por el medio de registro (Internet,  Teléfono, Presencial) y muestre las ganancias obtenidas en base a rango de fechas dado.\",\r\n    inputType: [\"twoDates\"],\r\n    name: \"Consulta 12\",\r\n  },\r\n  // 13\r\n  {\r\n    description:\r\n      \"Reporte del departamento con mejor rating de satisfacción, en base a un rango de fechas dado.\",\r\n    inputType: [null],\r\n    name: \"Consulta 13\",\r\n  },\r\n];\r\nexport default queries;\r\n","const gets = [\r\n  {\r\n    route: \"/habitacion\",\r\n    inputs: [],\r\n    name: \"Obtener: Habitación\",\r\n    description: \"Obtiene los registros de la tabla Habitación\",\r\n  },\r\n  {\r\n    route: \"/habitacion\",\r\n    inputs: [\r\n      { type: \"int\", name: \"Edificio\" },\r\n      { type: \"int\", name: \"Piso\" },\r\n      { type: \"string_50\", name: \"Estado de disponibilidad\" },\r\n      { type: \"string_50\", name: \"ID tipo\" },\r\n    ],\r\n    name: \"Obtener: Habitación por filtros\",\r\n    description: \"Obtiene los registros de la tabla Habitación por filtros\",\r\n  },\r\n  {\r\n    route: \"/marco\",\r\n    inputs: [],\r\n    name: \"Obtener: Marco\",\r\n    description: \"Obtiene los registros de la tabla Marco\",\r\n  },\r\n  {\r\n    route: \"/factura\",\r\n    inputs: [],\r\n    name: \"Obtener: Factura\",\r\n    description: \"Obtiene los registros de la tabla Factura\",\r\n  },\r\n  {\r\n    route: \"/departamento\",\r\n    inputs: [],\r\n    name: \"Obtener: Departamento\",\r\n    description: \"Obtiene los registros de la tabla Departamento\",\r\n  },\r\n  {\r\n    route: \"/empleado\",\r\n    inputs: [],\r\n    name: \"Obtener: Empleado\",\r\n    description: \"Obtiene los registros de la tabla Empleado\",\r\n  },\r\n  {\r\n    route: \"/habitaciones_por_registro\",\r\n    inputs: [],\r\n    name: \"Obtener: Habitaciones por registro\",\r\n    description: \"Obtiene los registros de la tabla Habitaciones por registro\",\r\n  },\r\n  {\r\n    route: \"/habitaciones_por_reservacion\",\r\n    inputs: [],\r\n    name: \"Obtener: Habitaciones por reservación\",\r\n    description:\r\n      \"Obtiene los registros de la tabla Habitaciones por reservación\",\r\n  },\r\n  {\r\n    route: \"/huesped_acompana\",\r\n    inputs: [],\r\n    name: \"Obtener: Huesped acompañante\",\r\n    description: \"Obtiene los registros de la tabla Huesped acompañante\",\r\n  },\r\n  {\r\n    route: \"/paquetes\",\r\n    inputs: [],\r\n    name: \"Obtener: Paquetes\",\r\n    description: \"Obtiene los registros de la tabla Paquetes\",\r\n  },\r\n  {\r\n    route: \"/quejas\",\r\n    inputs: [],\r\n    name: \"Obtener: Quejas\",\r\n    description: \"Obtiene los registros de la tabla Quejas\",\r\n  },\r\n  {\r\n    route: \"/quejas_por_depto\",\r\n    inputs: [],\r\n    name: \"Obtener: Quejas por departamento\",\r\n    description: \"Obtiene los registros de la tabla Quejas por departamento\",\r\n  },\r\n  {\r\n    route: \"/registro\",\r\n    inputs: [],\r\n    name: \"Obtener: Registro\",\r\n    description: \"Obtiene los registros de la tabla Registro\",\r\n  },\r\n  {\r\n    route: \"/reservaciones\",\r\n    inputs: [],\r\n    name: \"Obtener: Reservaciones\",\r\n    description: \"Obtiene los registros de la tabla Reservaciones\",\r\n  },\r\n  {\r\n    route: \"/satisfaccion\",\r\n    inputs: [],\r\n    name: \"Obtener: Satisfacción\",\r\n    description: \"Obtiene los registros de la tabla Satisfacción\",\r\n  },\r\n  {\r\n    route: \"/servicio\",\r\n    inputs: [],\r\n    name: \"Obtener: Servicio\",\r\n    description: \"Obtiene los registros de la tabla Servicio\",\r\n  },\r\n  {\r\n    route: \"/servicios_por_habitacion\",\r\n    inputs: [],\r\n    name: \"Obtener: Servicios por habitación\",\r\n    description: \"Obtiene los registros de la tabla Servicios por habitación\",\r\n  },\r\n  {\r\n    route: \"/servicios_por_paquete\",\r\n    inputs: [],\r\n    name: \"Obtener: Servicios por paquete\",\r\n    description: \"Obtiene los registros de la tabla Servicios por paquete\",\r\n  },\r\n  {\r\n    route: \"/tipo\",\r\n    inputs: [],\r\n    name: \"Obtener: Tipo\",\r\n    description: \"Obtiene los registros de la tabla Tipo\",\r\n  },\r\n  {\r\n    route: \"huesped_por_habitacion\",\r\n    inputs: [],\r\n    name: \"Obtener: Huesped por habitación\",\r\n    description: \"Obtiene los registros de la tabla Huesped por habitación\",\r\n  },\r\n];\r\n\r\nexport default gets;\r\n// edicicio int, piso int, estado_disponiblidad string, id_tipo string\r\n","const storedProcedures = [\r\n  {\r\n    route: \"/bonos\",\r\n    name: \"Bonos\",\r\n    description:\r\n      \"Genera logs de los bonos obtenidos para cada empleado que trabaja en mostrador por sus registros de huespedes\",\r\n    inputs: [],\r\n  },\r\n  {\r\n    route: \"/aplicar_desc\",\r\n    name: \"Aplicar descuento\",\r\n    description:\r\n      \"Genera una vista mostrando los valores por tipo de habitacion aplicando el descuento del pquete elegido por usuario\",\r\n    inputs: [],\r\n  },\r\n  {\r\n    route: \"/AvailablePaquete\",\r\n    name: \"Paquete disponible\",\r\n    description: \"Obtiene los paquetes disponibles para determinada fecha\",\r\n    inputs: [],\r\n  },\r\n  {\r\n    route: \"/checar_acompanantes\",\r\n    name: \"Checar acompañantes\",\r\n    description:\r\n      \"Verifica que determinado acompañante ya esté instanciado dentro de la tabla huesped_acompana para no volverlo a registrar\",\r\n    inputs: [],\r\n  },\r\n  {\r\n    route: \"/CambiarHab\",\r\n    name: \"Cambiar habitación\",\r\n    description:\r\n      \"Actualiza informacion relativa al traslado de un huesped de una habitacion a otra: cobros, referencia de huespedes, actualizacion de estado de disponibildiad de habitaciones\",\r\n    inputs: [],\r\n  },\r\n];\r\n\r\nexport default storedProcedures;\r\n","// // fecha date, importe double, id_huesped  int, importe_final double\r\n// router.post(\"/factura/:fecha/:importe/:id_huesped/:importe_final\", postFactura);\r\n\r\n// // nombre string(50), fecha_nacimiento date, direccion string(50), email string(50), telefonos int, ciudad string(20), estado string(20), pais string(20), medio string(15)\r\n// router.post(\r\n//   \"/huesped_paga/:nombre/:fecha_nacimiento/:direccion/:email/:rfc/:tel_casa/:tel_celular/:ciudad/:estado/:pais/:medio\",\r\n//   postHuespedPaga\r\n// );\r\n\r\n// // nombre string(50), fecha date, email string(50), id int\r\n// router.post(\r\n//   \"/huesped_acompana/:nombre_acompanante/:fecha_nac/:email/:id_huesped\",\r\n//   postHuespedAcompana\r\n// );\r\n\r\n// // quejaI int, facturaI int, queja string\r\n// router.post(\"/quejas/:quejaI/:facturaI/:queja\", postQuejas);\r\n\r\n// // fecha date, id's int\r\n// router.post(\r\n//   \"/registro/:fechaI/:fechaS/:id_huesped/:id_empleado/:id_paquete\",\r\n//   postRegistro\r\n// );\r\n\r\n// // num_personas int, num_noches int, deposito double, medio string(15), email string(50), id's int, estado string(20), fecha date\r\n// router.post(\r\n//   \"/reservacion/:num_personas/:num_noches/:deposito/:medio/:email_reservador/:id_huesped/:id_paquete/:estado/:fecha_inicio\",\r\n//   postReservacion\r\n// );\r\n\r\n// // servicio string(50), costo double, tipo bool, descripcion string, hora time_without_time_zone, fecha date\r\n// router.post(\r\n//   \"/servicio/:servicio/:costo_por_persona/:tipo/:descripcion/:hora_inicio/:hora_fin/:fecha\",\r\n//   postServicio\r\n// );\r\n\r\n// // precio double, tipo_cama string(20), numero int, nombre string(20)\r\n// router.post(\"/tipo/:precio/:tipo_cama/:numero_camas/:nombre\", postTipo);\r\n\r\n// // nombre string(25), id int\r\n// router.post(\"/departamento/:nombre/:id_super\", postDepartamento);\r\n\r\n// // nombre string(50), double, string(1), int\r\n// router.post(\r\n//   \"/empleados/:nombre_completo/:salario/:sexo/:id_departamento\",\r\n//   postEmpleados\r\n// );\r\n\r\n// // int, int\r\n// router.post(\r\n//   \"/habitaciones_por_registro/:numero_habitacion/:id_registro\",\r\n//   posthabitaciones_por_registro\r\n// );\r\n\r\n// // int, int\r\n// router.post(\r\n//   \"/habitaciones_por_reservacion/:numero_habitacion/:id_reservacion\",\r\n//   postHabitaciones_por_reservacion\r\n// );\r\n\r\n// // int, int\r\n// router.post(\r\n//   \"/huesped_por_habitacion/:numero_habitacion:/id_huesped\",\r\n//   postHuesped_por_habitacion\r\n// );\r\n\r\n// // int, int\r\n// router.post(\r\n//   \"/quejas_por_departamento/:id_departamento/:id_queja\",\r\n//   postQuejas_por_departamento\r\n// );\r\n\r\n// // int, int , int\r\n// router.post(\"/satisfaccion/:id_factura/:valor/:id_depto\", postSatisfaccion);\r\n\r\n// // int, int, double, date\r\n// router.post(\r\n//   \"/servicios_por_habitacion/:numero_habitacion/:id_servicio/:importe/:fecha\",\r\n//   postServicios_por_habitacion\r\n// );\r\n\r\n// // int, int\r\n// router.post(\r\n//   \"/servicios_por_paquete/:id_paquete/:id_servicio\",\r\n//   postServicios_por_paquete\r\n// );\r\n\r\n// Posts\r\nconst posts = [\r\n  {\r\n    route: \"/factura\",\r\n    inputs: [\r\n      { type: \"date\", name: \"Fecha\" },\r\n      { type: \"double\", name: \"Importe\" },\r\n      { type: \"int\", name: \"ID del huesped\" },\r\n      { type: \"double\", name: \"Importe final\" },\r\n    ],\r\n    name: \"Inserción en Factura\",\r\n    description: \"Inserta en la tabla Factura\",\r\n  },\r\n  {\r\n    route: \"/huesped_paga\",\r\n    inputs: [\r\n      { type: \"string_50\", name: \"Nombre\" },\r\n      { type: \"date\", name: \"Fecha de nacimiento\" },\r\n      { type: \"string_50\", name: \"Dirección\" },\r\n      { type: \"string_50\", name: \"Email\" },\r\n      { type: \"int\", name: \"Teléfonos\" },\r\n      { type: \"string_20\", name: \"Ciudad\" },\r\n      { type: \"string_20\", name: \"Estado\" },\r\n      { type: \"string_20\", name: \"País\" },\r\n      { type: \"string_15\", name: \"Medio\" },\r\n    ],\r\n    name: \"Inserción en Huesped de paga\",\r\n    description: \"Inserta en la tabla Huesped de paga\",\r\n  },\r\n  {\r\n    route: \"/huesped_acompana\",\r\n    inputs: [\r\n      { type: \"string_50\", name: \"Nombre\" },\r\n      { type: \"date\", name: \"Fecha de nacimiento\" },\r\n      { type: \"string_50\", name: \"Email\" },\r\n      { type: \"int\", name: \"ID\" },\r\n    ],\r\n    name: \"Inserción en Huesped acompañante\",\r\n    description: \"Inserta en la tabla Huesped acompañante\",\r\n  },\r\n  {\r\n    route: \"/quejas\",\r\n    inputs: [\r\n      { type: \"int\", name: \"QuejaI\" },\r\n      { type: \"int\", name: \"FacturaI\" },\r\n      { type: \"string_50\", name: \"Queja\" },\r\n    ],\r\n    name: \"Inserción en Quejas\",\r\n    description: \"Inserta en la tabla Quejas\",\r\n  },\r\n  {\r\n    route: \"/registro\",\r\n    inputs: [\r\n      { type: \"date\", name: \"FechaI\" },\r\n      { type: \"date\", name: \"FechaS\" },\r\n      { type: \"int\", name: \"ID del huesped\" },\r\n      { type: \"int\", name: \"ID del empleado\" },\r\n      { type: \"int\", name: \"ID del paquete\" },\r\n    ],\r\n    name: \"Inserción en Registro\",\r\n    description: \"Inserta en la tabla Registro\",\r\n  },\r\n  {\r\n    route: \"/reservacion\",\r\n    inputs: [\r\n      { type: \"int\", name: \"Número de personas\" },\r\n      { type: \"int\", name: \"Número de noches\" },\r\n      { type: \"double\", name: \"Depósito\" },\r\n      { type: \"string_15\", name: \"Medio\" },\r\n      { type: \"string_50\", name: \"Email\" },\r\n      { type: \"int\", name: \"ID del huesped\" },\r\n      { type: \"int\", name: \"ID del paquete\" },\r\n      { type: \"string_50\", name: \"Estado\" },\r\n      { type: \"date\", name: \"Fecha de inicio\" },\r\n    ],\r\n    name: \"Inserción en Reservación\",\r\n    description: \"Inserta en la tabla Reservación\",\r\n  },\r\n  {\r\n    route: \"/servicio\",\r\n    inputs: [\r\n      { type: \"string_50\", name: \"Servicio\" },\r\n      { type: \"double\", name: \"Costo\" },\r\n      { type: \"boolean\", name: \"Tipo\" },\r\n      { type: \"string_50\", name: \"Descripción\" },\r\n      { type: \"hour\", name: \"Hora\" },\r\n      { type: \"date\", name: \"Fecha\" },\r\n    ],\r\n    name: \"Inserción en Servicio\",\r\n    description: \"Inserta en la tabla Servicio\",\r\n  },\r\n  {\r\n    route: \"/tipo\",\r\n    inputs: [\r\n      { type: \"double\", name: \"Precio\" },\r\n      { type: \"string_20\", name: \"Tipo de cama\" },\r\n      { type: \"int\", name: \"Número\" },\r\n      { type: \"string_20\", name: \"Nombre\" },\r\n    ],\r\n    name: \"Inserción en Tipo\",\r\n    description: \"Inserta en la tabla Tipo\",\r\n  },\r\n  {\r\n    route: \"/departamento\",\r\n    inputs: [\r\n      { type: \"string_25\", name: \"Nombre\" },\r\n      { type: \"int\", name: \"ID\" },\r\n    ],\r\n    name: \"Inserción en Departamento\",\r\n    description: \"Inserta en la tabla Departamento\",\r\n  },\r\n  {\r\n    route: \"/empleados\",\r\n    inputs: [\r\n      { type: \"string_50\", name: \"Nombre\" },\r\n      { type: \"double\", name: \"Salario\" },\r\n      { type: \"string_1\", name: \"Sexo\" },\r\n      { type: \"int\", name: \"ID del departamento\" },\r\n    ],\r\n    name: \"Inserción en Empleados\",\r\n    description: \"Inserta en la tabla Empleados\",\r\n  },\r\n  {\r\n    route: \"/habitaciones_por_registro\",\r\n    inputs: [\r\n      { type: \"int\", name: \"Número de habitación\" },\r\n      { type: \"int\", name: \"ID del registro\" },\r\n    ],\r\n    name: \"Inserción en Habitaciones por registro\",\r\n    description: \"Inserta en la tabla Habitaciones por registro\",\r\n  },\r\n  {\r\n    route: \"/habitaciones_por_reservacion\",\r\n    inputs: [\r\n      { type: \"int\", name: \"Número de habitación\" },\r\n      { type: \"int\", name: \"ID de la reservación\" },\r\n    ],\r\n    name: \"Inserción en Habitaciones por reservación\",\r\n    description: \"Inserta en la tabla Habitaciones por reservación\",\r\n  },\r\n  {\r\n    route: \"/huesped_por_habitacion\",\r\n    inputs: [\r\n      { type: \"int\", name: \"Número de habitación\" },\r\n      { type: \"int\", name: \"ID del huesped\" },\r\n    ],\r\n    name: \"Inserción en Huesped por habitación\",\r\n    description: \"Inserta en la tabla Huesped por habitación\",\r\n  },\r\n  {\r\n    route: \"/quejas_por_departamento\",\r\n    inputs: [\r\n      { type: \"int\", name: \"ID del departamento\" },\r\n      { type: \"int\", name: \"ID de la queja\" },\r\n    ],\r\n    name: \"Inserción en Quejas por departamento\",\r\n    description: \"Inserta en la tabla Quejas por departamento\",\r\n  },\r\n  {\r\n    route: \"/satisfaccion\",\r\n    inputs: [\r\n      { type: \"int\", name: \"ID de la factura\" },\r\n      { type: \"int\", name: \"Valor\" },\r\n      { type: \"int\", name: \"ID del departamento\" },\r\n    ],\r\n    name: \"Inserción en Satisfacción\",\r\n    description: \"Inserta en la tabla Satisfacción\",\r\n  },\r\n  {\r\n    route: \"/servicios_por_habitacion\",\r\n    inputs: [\r\n      { type: \"int\", name: \"Número de habitación\" },\r\n      { type: \"int\", name: \"ID del servicio\" },\r\n      { type: \"double\", name: \"Importe\" },\r\n      { type: \"date\", name: \"Fecha\" },\r\n    ],\r\n    name: \"Inserción en Servicios por habitación\",\r\n    description: \"Inserta en la tabla Servicios por habitación\",\r\n  },\r\n  {\r\n    route: \"/servicios_por_paquete\",\r\n    inputs: [\r\n      { type: \"int\", name: \"ID del paquete\" },\r\n      { type: \"int\", name: \"ID del servicio\" },\r\n    ],\r\n    name: \"Inserción en Servicios por paquete\",\r\n    description: \"Inserta en la tabla Servicios por paquete\",\r\n  },\r\n];\r\n\r\nexport default posts;\r\n// string_X, int, double, boolean, date, hour\r\n","// React imports\nimport React, { useState } from \"react\";\nimport \"./App.css\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n\n// HTTP\nimport axios from \"axios\";\n\n// Components\nimport { Table } from \"./components/Table\";\n\n// Config\nimport queries from \"./config/queries\";\nimport gets from \"./config/gets\";\nimport storedProcedures from \"./config/storedProcedures\";\nimport posts from \"./config/posts\";\n\nconst App = () => {\n  // Constants\n  const [selectedNavIndex, setSelectedNavIndex] = useState(0);\n  const [selectedInputIndex, setSelectedInputIndex] = useState(0);\n  const [input, setInput] = useState(0);\n  const [startDate, setStartDate] = useState(new Date());\n  const [finalDate, setFinalDate] = useState(new Date());\n  const [resData, setResData] = useState(null);\n  const [err, setErr] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [activeSection, setActiveSection] = useState(\"gets\");\n  const [activeObj, setActiveObj] = useState({ ...gets[0], type: \"get\" });\n  const [inputs, setInputs] = useState([]);\n  const [inputErr, setInputErr] = useState(false);\n\n  const strings = {\n    inputNames: {\n      twoDates: \"Fechas\",\n      null: \"Sin entrada\",\n      id: \"ID\",\n    },\n    booleans: {\n      true: \"Verdadero\",\n      false: \"Falso\",\n    },\n  };\n\n  // Functions\n  const buildRoute = () => {\n    try {\n      let route = activeObj.route;\n      for (let i = 0; i < activeObj.inputs.length; i++) {\n        const input = activeObj.inputs[i];\n        if (inputs[i] == null) return;\n        route += `/${parseInput(inputs[i], input.type)}`;\n      }\n      return route;\n    } catch (e) {}\n  };\n\n  const changeInput = (value) => {\n    if (value === \"\") {\n      setInput(1);\n      return;\n    }\n    try {\n      if (isNaN(value)) return;\n      value = parseInt(value);\n      if (value < 1) return;\n      setInput(value);\n    } catch (e) {}\n  };\n\n  const changeInputs = (value, index) => {\n    if (activeObj.inputs[index].type === \"int\") setIntInput(value, index);\n    else if (activeObj.inputs[index].type === \"double\")\n      setDoubleInput(value, index);\n    else if (activeObj.inputs[index].type === \"date\")\n      setDateInput(value, index);\n    else if (activeObj.inputs[index].type === \"hour\")\n      setDateInput(value, index);\n    else if (activeObj.inputs[index].type === \"boolean\")\n      setBooleanInput(value, index);\n    else setStringInput(value, index);\n  };\n\n  const changeObj = (newIndex, section) => {\n    setInputs([]);\n    setActiveSection(section);\n    setSelectedInputIndex(0);\n    setSelectedNavIndex(newIndex);\n    setLoading(false);\n    setErr(false);\n    setResData(null);\n    setInputErr(false);\n\n    if (section === \"gets\") setActiveObj({ ...gets[newIndex], type: \"get\" });\n    if (section === \"posts\") setActiveObj({ ...posts[newIndex], type: \"post\" });\n    if (section === \"storedProcedures\")\n      setActiveObj({ ...storedProcedures[newIndex], type: \"storedProcedure\" });\n    if (section === \"queries\")\n      setActiveObj({ ...queries[newIndex], type: \"query\" });\n  };\n\n  const formatDate = (date = new Date()) => {\n    return `${date.getFullYear()}-${date.getMonth() + 1}-${date.getDate()}`;\n  };\n\n  const formatHour = (date = new Date()) => {\n    let hours = date.getHours();\n    hours = hours.length === 1 ? \"0\" + hours : hours;\n    let minutes = date.getMinutes();\n    minutes = minutes.length === 1 ? \"0\" + minutes : minutes;\n    let seconds = date.getSeconds();\n    seconds = seconds.length === 1 ? \"0\" + seconds : seconds;\n    return `${hours}:${minutes}:${seconds}`;\n  };\n\n  const handleBtn = () => {\n    if (activeObj.type === \"query\") makeQuery();\n    if ([\"get\", \"storedProcedure\"].includes(activeObj.type)) makeGet();\n    if (activeObj.type === \"post\") makePost();\n  };\n\n  const makeGet = async () => {\n    setErr(false);\n\n    const route = buildRoute();\n    console.log(route);\n    if (!route) {\n      setInputErr(true);\n      return;\n    }\n    setInputErr(false);\n\n    setLoading(true);\n    let response;\n    try {\n      response = await axios.get(route);\n    } catch (e) {\n      setLoading(false);\n      setErr(true);\n      return;\n    }\n    setLoading(false);\n\n    if (response.status !== 200) {\n      setErr(true);\n      return;\n    }\n\n    setResData(response.data);\n  };\n\n  const makePost = async () => {\n    setErr(false);\n\n    const route = buildRoute();\n    console.log(route);\n    if (!route) {\n      setInputErr(true);\n      return;\n    }\n    setInputErr(false);\n\n    setLoading(true);\n    let response;\n    try {\n      response = await axios.post(route);\n    } catch (e) {\n      setLoading(false);\n      setErr(true);\n      return;\n    }\n    setLoading(false);\n\n    if (response.status !== 200) {\n      setErr(true);\n      return;\n    }\n\n    setResData(response.data);\n  };\n\n  const makeQuery = async () => {\n    setErr(false);\n\n    let route = \"\";\n    if (queries[selectedNavIndex].inputType[selectedInputIndex] === \"twoDates\")\n      route += `/${formatDate(startDate)}/${formatDate(finalDate)}`;\n    else if (queries[selectedNavIndex].inputType[selectedInputIndex] === \"id\")\n      route += `/${input}`;\n\n    setLoading(true);\n    console.log(`http://localhost:3000/query${selectedNavIndex + 1}${route}`);\n    let response;\n    try {\n      response = await axios.get(\n        `http://localhost:3000/query${selectedNavIndex + 1}${route}`\n      );\n    } catch (e) {\n      setLoading(false);\n      setErr(true);\n      return;\n    }\n    setLoading(false);\n\n    if (response.status !== 200) {\n      setErr(true);\n      return;\n    }\n\n    setResData(response.data);\n  };\n\n  const parseInput = (value, type) => {\n    if (type === \"hour\") return formatHour(value);\n    if (type === \"date\") return formatDate(value);\n    if (type === \"int\") return parseInput(value);\n    if (type === \"double\") return parseFloat(value);\n    return value;\n  };\n\n  const setBooleanInput = (value, index) => {\n    let temp = [...inputs];\n    temp[index] = value;\n    setInputs(temp);\n  };\n\n  const setDateInput = (value, index) => {\n    let temp = [...inputs];\n    temp[index] = value;\n    setInputs(temp);\n  };\n\n  const setDoubleInput = (value, index) => {\n    let temp = [...inputs];\n    if (value === \"\") {\n      temp[index] = 0;\n      setInputs(temp);\n      return;\n    }\n\n    try {\n      // if (typeof value === \"number\") value = value.toString();\n      if (value.charAt(value.length - 1) === \".\") value = value + \"0\";\n      if (isNaN(value)) return;\n      parseFloat(value);\n      if (value < 0) return;\n      temp[index] = value;\n      setInputs(temp);\n      console.log(value);\n    } catch (e) {}\n  };\n\n  const setIntInput = (value, index) => {\n    let temp = [...inputs];\n    if (value === \"\") {\n      temp[index] = 1;\n      setInputs(temp);\n      return;\n    }\n    try {\n      if (isNaN(value)) return;\n      value = parseInt(value);\n      if (value <= 0) return;\n      temp[index] = value;\n      setInputs(temp);\n    } catch (e) {}\n  };\n\n  const setStringInput = (value, index) => {\n    const limit = activeObj.inputs[index].type.split(\"_\")[1];\n    let temp = [...inputs];\n    temp[index] = value.substring(0, limit);\n    setInputs(temp);\n  };\n\n  // Render\n  return (\n    <div className=\"app\">\n      {/* Nav bar */}\n      <nav>\n        <img\n          src=\"https://raw.githubusercontent.com/ulisesaviles/db-postgre-app/main/app/public/logo1000.png\"\n          className=\"logo\"\n          alt=\"logo\"\n        />\n        <div className=\"nav-items-container\">\n          <div className=\"white-gradient\">.</div>\n          {/* Gets */}\n          <h3>Tablas</h3>\n          <div className=\"nav-queries-container\">\n            {gets.map((getItem) => {\n              const index = gets.indexOf(getItem);\n              return (\n                <div\n                  className={`nav-query-Container ${\n                    selectedNavIndex === index && activeSection === \"gets\"\n                      ? \"nav-query-Container-selected\"\n                      : \"\"\n                  }`}\n                  onClick={() => changeObj(index, \"gets\")}\n                >\n                  {getItem.name}\n                </div>\n              );\n            })}\n          </div>\n\n          {/* Posts */}\n          <h3>Inserciones</h3>\n          <div className=\"nav-queries-container\">\n            {posts.map((postItem) => {\n              const index = posts.indexOf(postItem);\n              return (\n                <div\n                  className={`nav-query-Container ${\n                    selectedNavIndex === index && activeSection === \"posts\"\n                      ? \"nav-query-Container-selected\"\n                      : \"\"\n                  }`}\n                  onClick={() => changeObj(index, \"posts\")}\n                >\n                  {postItem.name}\n                </div>\n              );\n            })}\n          </div>\n\n          {/* Queries */}\n          <h3>Consultas</h3>\n          <div className=\"nav-queries-container\">\n            {queries.map((query) => {\n              const index = queries.indexOf(query);\n              return (\n                <div\n                  className={`nav-query-Container ${\n                    selectedNavIndex === index && activeSection === \"queries\"\n                      ? \"nav-query-Container-selected\"\n                      : \"\"\n                  }`}\n                  onClick={() => changeObj(index, \"queries\")}\n                >\n                  Consulta {index + 1}\n                </div>\n              );\n            })}\n          </div>\n\n          {/* Stored procedures */}\n          <h3>Stored procedures</h3>\n          <div className=\"nav-queries-container\">\n            {storedProcedures.map((storedProcedure) => {\n              const index = storedProcedures.indexOf(storedProcedure);\n              return (\n                <div\n                  className={`nav-query-Container ${\n                    selectedNavIndex === index &&\n                    activeSection === \"storedProcedures\"\n                      ? \"nav-query-Container-selected\"\n                      : \"\"\n                  }`}\n                  onClick={() => changeObj(index, \"storedProcedures\")}\n                >\n                  {storedProcedure.name}\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      </nav>\n\n      {/* Content */}\n      <div className=\"content-container\">\n        {/* Description */}\n        <div className=\"description-container\">\n          <h1 style={{ fontSize: 45 }}>{activeObj.name}</h1>\n          <h3>Descripción</h3>\n          {activeObj.description}\n        </div>\n\n        {/* Input section */}\n        <div className=\"content-subContainer border-bottom\">\n          <h1>Input</h1>\n          {activeObj.type === \"query\" ? (\n            <>\n              <div className=\"ipnutsContainer\">\n                {queries[selectedNavIndex].inputType.map((type) => {\n                  const inputIndex =\n                    queries[selectedNavIndex].inputType.indexOf(type);\n                  return (\n                    <div\n                      className={\n                        selectedInputIndex === inputIndex\n                          ? \"inputName\"\n                          : \"margin\"\n                      }\n                      onClick={() => setSelectedInputIndex(inputIndex)}\n                    >\n                      {strings.inputNames[type]}\n                    </div>\n                  );\n                })}\n              </div>\n              {queries[selectedNavIndex].inputType[selectedInputIndex] ===\n              null ? (\n                <p className=\"noInput\">(Esta consulta no requiere input)</p>\n              ) : queries[selectedNavIndex].inputType[selectedInputIndex] ===\n                \"twoDates\" ? (\n                <div className=\"datesContainer\">\n                  <DatePicker\n                    selected={startDate}\n                    onChange={(date) => setStartDate(date)}\n                  />\n                  <DatePicker\n                    selected={finalDate}\n                    onChange={(date) => setFinalDate(date)}\n                  />\n                </div>\n              ) : (\n                <div\n                  style={{\n                    display: \"flex\",\n                    alignItems: \"center\",\n                    flexDirection: \"column\",\n                  }}\n                >\n                  <input\n                    onChange={(e) => changeInput(e.target.value)}\n                    value={input}\n                  />\n                  <p className=\"noInput\" style={{ fontSize: 14 }}>\n                    (Recuerda ingresar enteros positivos)\n                  </p>\n                </div>\n              )}\n            </>\n          ) : (\n            // New input format\n            <>\n              {activeObj.inputs.map((input) => {\n                const inputIndex = activeObj.inputs.indexOf(input);\n                return (\n                  <div className=\"inputContainer\">\n                    <p className=\"inputName_\">{input.name}</p>\n                    {input.type === \"int\" ? (\n                      <>\n                        <input\n                          onChange={(e) =>\n                            changeInputs(e.target.value, inputIndex)\n                          }\n                          value={inputs[inputIndex]}\n                        />\n                        <p className=\"noInput\" style={{ fontSize: 14 }}>\n                          (Recuerda ingresar enteros positivos)\n                        </p>\n                      </>\n                    ) : input.type === \"double\" ? (\n                      <>\n                        <input\n                          onChange={(e) =>\n                            changeInputs(e.target.value, inputIndex)\n                          }\n                          value={inputs[inputIndex]}\n                        />\n                        <p className=\"noInput\" style={{ fontSize: 14 }}>\n                          (Recuerda ingresar números positivos)\n                        </p>\n                      </>\n                    ) : input.type === \"boolean\" ? (\n                      <>\n                        <div className=\"ipnutsContainer\">\n                          {[false, true].map((bool) => {\n                            return (\n                              <div\n                                className={\n                                  inputs[inputIndex] === bool\n                                    ? \"inputName\"\n                                    : \"margin\"\n                                }\n                                onClick={() => changeInputs(bool, inputIndex)}\n                              >\n                                {strings.booleans[JSON.stringify(bool)]}\n                              </div>\n                            );\n                          })}\n                        </div>\n                      </>\n                    ) : input.type === \"date\" ? (\n                      <>\n                        <DatePicker\n                          selected={inputs[inputIndex]}\n                          onChange={(date) => changeInputs(date, inputIndex)}\n                        />\n                      </>\n                    ) : input.type === \"hour\" ? (\n                      <>\n                        <DatePicker\n                          selected={inputs[inputIndex]}\n                          onChange={(date) => changeInputs(date, inputIndex)}\n                          showTimeSelect\n                          showTimeSelectOnly\n                        />\n                      </>\n                    ) : (\n                      <>\n                        <input\n                          onChange={(e) =>\n                            changeInputs(e.target.value, inputIndex)\n                          }\n                          value={inputs[inputIndex]}\n                          style={{ width: \"200%\" }}\n                        />\n                        <p className=\"noInput\" style={{ fontSize: 14 }}>\n                          (Recuerda ingresar hasta{\" \"}\n                          {activeObj.inputs[inputIndex].type.split(\"_\")[1]}{\" \"}\n                          caracteres)\n                        </p>\n                      </>\n                    )}\n                  </div>\n                );\n              })}\n            </>\n          )}\n          <div className=\"nav-query-Container-selected btn\" onClick={handleBtn}>\n            Hacer consulta\n          </div>\n          {inputErr ? <p className=\"err\">Ingresa información válida</p> : null}\n        </div>\n\n        {/* Response section */}\n        <div className=\"content-subContainer\">\n          <h1>Output</h1>\n          {loading ? (\n            <p className=\"noInput\" style={{ margin: 20 }}>\n              Cargando...\n            </p>\n          ) : err ? (\n            <p className=\"noInput\" style={{ margin: 20 }}>\n              Error. Revisa tu conexión.\n            </p>\n          ) : resData != null && typeof resData === \"object\" ? (\n            <Table data={resData} />\n          ) : resData != null && typeof resData === \"string\" ? (\n            <p className=\"noInput\" style={{ margin: 20 }}>\n              ¡Hecho!\n            </p>\n          ) : (\n            <p className=\"noInput\" style={{ margin: 20 }}>\n              (Ingresa la información solicitada y preciona \"Hacer consulta\")\n            </p>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}